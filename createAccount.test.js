import { render, screen, cleanup } from '@testing-library/react';
import { click } from '@testing-library/user-event/dist/click';
import { type } from '@testing-library/user-event/dist/type';
import CreateAccount from './createAccount';
import App from './App';

test('nothing entered', async () => {
    render(<CreateAccount />)
    let name = screen.getByTestId('name')
    let email = screen.getByTestId('email')
    let password = screen.getByTestId('password')
    expect(name.classList.contains('is-valid')).toBe(false)
    expect(name.classList.contains('is-invalid')).toBe(false)
    expect(email.classList.contains('is-valid')).toBe(false)
    expect(email.classList.contains('is-invalid')).toBe(false)
    expect(password.classList.contains('is-valid')).toBe(false)
    expect(password.classList.contains('is-invalid')).toBe(false)
    let button = screen.getByTestId('create')
    click(button)
    expect(name.classList.contains('is-valid')).toBe(false)
    expect(name.classList.contains('is-invalid')).toBe(true)
    expect(email.classList.contains('is-valid')).toBe(false)
    expect(email.classList.contains('is-invalid')).toBe(true)
    expect(password.classList.contains('is-valid')).toBe(false)
    expect(password.classList.contains('is-invalid')).toBe(true)
})

test('name entered', async () => {
    render(<CreateAccount />)
    let name = screen.getByTestId('name')
    let email = screen.getByTestId('email')
    let password = screen.getByTestId('password')
    expect(name.classList.contains('is-valid')).toBe(false)
    expect(name.classList.contains('is-invalid')).toBe(false)
    expect(email.classList.contains('is-valid')).toBe(false)
    expect(email.classList.contains('is-invalid')).toBe(false)
    expect(password.classList.contains('is-valid')).toBe(false)
    expect(password.classList.contains('is-invalid')).toBe(false)
    type(name, 'name')
    let button = screen.getByTestId('create')
    click(button)
    expect(name.classList.contains('is-valid')).toBe(true)
    expect(name.classList.contains('is-invalid')).toBe(false)
    expect(email.classList.contains('is-valid')).toBe(false)
    expect(email.classList.contains('is-invalid')).toBe(true)
    expect(password.classList.contains('is-valid')).toBe(false)
    expect(password.classList.contains('is-invalid')).toBe(true)
})

test('email entered', async () => {
    render(<CreateAccount />)
    let name = screen.getByTestId('name')
    let email = screen.getByTestId('email')
    let password = screen.getByTestId('password')
    expect(name.classList.contains('is-valid')).toBe(false)
    expect(name.classList.contains('is-invalid')).toBe(false)
    expect(email.classList.contains('is-valid')).toBe(false)
    expect(email.classList.contains('is-invalid')).toBe(false)
    expect(password.classList.contains('is-valid')).toBe(false)
    expect(password.classList.contains('is-invalid')).toBe(false)
    type(email, 'email')
    let button = screen.getByTestId('create')
    click(button)
    expect(name.classList.contains('is-valid')).toBe(false)
    expect(name.classList.contains('is-invalid')).toBe(true)
    expect(email.classList.contains('is-valid')).toBe(true)
    expect(email.classList.contains('is-invalid')).toBe(false)
    expect(password.classList.contains('is-valid')).toBe(false)
    expect(password.classList.contains('is-invalid')).toBe(true)
})

test('password entered', async () => {
    render(<CreateAccount />)
    let name = screen.getByTestId('name')
    let email = screen.getByTestId('email')
    let password = screen.getByTestId('password')
    expect(name.classList.contains('is-valid')).toBe(false)
    expect(name.classList.contains('is-invalid')).toBe(false)
    expect(email.classList.contains('is-valid')).toBe(false)
    expect(email.classList.contains('is-invalid')).toBe(false)
    expect(password.classList.contains('is-valid')).toBe(false)
    expect(password.classList.contains('is-invalid')).toBe(false)
    type(password, 'password')
    let button = screen.getByTestId('create')
    click(button)
    expect(name.classList.contains('is-valid')).toBe(false)
    expect(name.classList.contains('is-invalid')).toBe(true)
    expect(email.classList.contains('is-valid')).toBe(false)
    expect(email.classList.contains('is-invalid')).toBe(true)
    expect(password.classList.contains('is-valid')).toBe(true)
    expect(password.classList.contains('is-invalid')).toBe(false)
})

test('name and email entered', async () => {
    render(<CreateAccount />)
    let name = screen.getByTestId('name')
    let email = screen.getByTestId('email')
    let password = screen.getByTestId('password')
    expect(name.classList.contains('is-valid')).toBe(false)
    expect(name.classList.contains('is-invalid')).toBe(false)
    expect(email.classList.contains('is-valid')).toBe(false)
    expect(email.classList.contains('is-invalid')).toBe(false)
    expect(password.classList.contains('is-valid')).toBe(false)
    expect(password.classList.contains('is-invalid')).toBe(false)
    type(name, 'name')
    type(email, 'email')
    let button = screen.getByTestId('create')
    click(button)
    expect(name.classList.contains('is-valid')).toBe(true)
    expect(name.classList.contains('is-invalid')).toBe(false)
    expect(email.classList.contains('is-valid')).toBe(true)
    expect(email.classList.contains('is-invalid')).toBe(false)
    expect(password.classList.contains('is-valid')).toBe(false)
    expect(password.classList.contains('is-invalid')).toBe(true)
})

test('name and password entered', async () => {
    render(<CreateAccount />)
    let name = screen.getByTestId('name')
    let email = screen.getByTestId('email')
    let password = screen.getByTestId('password')
    expect(name.classList.contains('is-valid')).toBe(false)
    expect(name.classList.contains('is-invalid')).toBe(false)
    expect(email.classList.contains('is-valid')).toBe(false)
    expect(email.classList.contains('is-invalid')).toBe(false)
    expect(password.classList.contains('is-valid')).toBe(false)
    expect(password.classList.contains('is-invalid')).toBe(false)
    type(name, 'name')
    type(password, 'password')
    let button = screen.getByTestId('create')
    click(button)
    expect(name.classList.contains('is-valid')).toBe(true)
    expect(name.classList.contains('is-invalid')).toBe(false)
    expect(email.classList.contains('is-valid')).toBe(false)
    expect(email.classList.contains('is-invalid')).toBe(true)
    expect(password.classList.contains('is-valid')).toBe(true)
    expect(password.classList.contains('is-invalid')).toBe(false)
})

test('email and password entered', async () => {
    render(<CreateAccount />)
    let name = screen.getByTestId('name')
    let email = screen.getByTestId('email')
    let password = screen.getByTestId('password')
    expect(name.classList.contains('is-valid')).toBe(false)
    expect(name.classList.contains('is-invalid')).toBe(false)
    expect(email.classList.contains('is-valid')).toBe(false)
    expect(email.classList.contains('is-invalid')).toBe(false)
    expect(password.classList.contains('is-valid')).toBe(false)
    expect(password.classList.contains('is-invalid')).toBe(false)
    type(email, 'email')
    type(password, 'password')
    let button = screen.getByTestId('create')
    click(button)
    expect(name.classList.contains('is-valid')).toBe(false)
    expect(name.classList.contains('is-invalid')).toBe(true)
    expect(email.classList.contains('is-valid')).toBe(true)
    expect(email.classList.contains('is-invalid')).toBe(false)
    expect(password.classList.contains('is-valid')).toBe(true)
    expect(password.classList.contains('is-invalid')).toBe(false)
})

test('all entered', async () => {
    render(<App />)
    let button1 = screen.getByText(/Create/)
    click(button1)
    let name = screen.getByTestId('name')
    let email = screen.getByTestId('email')
    let password = screen.getByTestId('password')
    expect(name.classList.contains('is-valid')).toBe(false)
    expect(name.classList.contains('is-invalid')).toBe(false)
    expect(email.classList.contains('is-valid')).toBe(false)
    expect(email.classList.contains('is-invalid')).toBe(false)
    expect(password.classList.contains('is-valid')).toBe(false)
    expect(password.classList.contains('is-invalid')).toBe(false)
    type(name, 'name')
    type(email, 'email')
    type(password, 'password')
    let button = screen.getByTestId('create')
    click(button)
    expect(name.classList.contains('is-valid')).toBe(true)
    expect(name.classList.contains('is-invalid')).toBe(false)
    expect(email.classList.contains('is-valid')).toBe(true)
    expect(email.classList.contains('is-invalid')).toBe(false)
    expect(password.classList.contains('is-valid')).toBe(true)
    expect(password.classList.contains('is-invalid')).toBe(false)
})